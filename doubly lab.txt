#include <stdio.h>
#include <stdlib.h>

typedef struct Student {
    char name[20];
    int age;
    float height;
}Student;

typedef struct Node {
    Student student;
    struct Node* next;
    struct Node* prev;
}Node;

Node* head;

Node* getNewNode(Student x)  {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->student = x;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

void insertAtBegin(Student x) {
    Node* newNode = getNewNode(x);
    if(head == NULL) {
        head = newNode;
        return;
    }

    newNode->next = head;
    head->prev = newNode;
    head = newNode;
}


void insertAtEnd(Student x) {
    Node* newNode = getNewNode(x);
    if(head == NULL) {
        head = newNode;
        return;
    }

    Node* temp = head;
    while(temp->next != NULL) {
        temp=temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
}

void print(){
    if(head == NULL) {
        printf("Linked List is Empty\n");
        return;
    }

    Node* temp = head;
    printf("\nStudent Information (Forward):\n");
    printf("Name\tAge\tHeight\n");
    while(temp != NULL) {
        printf("%s\t%i\t%.2f\n", temp->student.name, temp->student.age, temp->student.height);
        temp = temp->next;
    }
    printf("NULL\n");
}

void reversePrint(){
    if(head == NULL) {
        printf("Linked List is Empty\n");
        return;
    }

    Node* temp = head;
    while(temp->next != NULL)
        temp = temp->next;

    printf("\nStudent Information (Reverse):\n");
    printf("Name\tAge\tHeight\n");
    while(temp != NULL) {
        printf("%s\t%i\t%.2f\n", temp->student.name, temp->student.age, temp->student.height);
        temp = temp->prev;
    }
    printf("NULL\n");
}

int main()
{
    int n;
    Student student;
    scanf("%d", &n);
    getchar();

    for(int i = 0; i < n; i++) {
        scanf("%s", student.name);
        getchar();
        scanf("%d", &student.age);
        getchar();
        scanf("%f", &student.height);
        getchar();
        insertAtEnd(student);
    }

    print();
    reversePrint();

    return 0;
}








/* Doubly Linked List implementation */
#include<stdio.h>
#include<stdlib.h>

struct Node  {
	int data;
	struct Node* next;
	struct Node* prev;
};

struct Node* head; // global variable - pointer to head node.

//Creates a new Node and returns pointer to it. 
struct Node* GetNewNode(int x) {
	struct Node* newNode
		= (struct Node*)malloc(sizeof(struct Node));
	newNode->data = x;
	newNode->prev = NULL;
	newNode->next = NULL;
	return newNode;
}

//Inserts a Node at head of doubly linked list
void InsertAtHead(int x) {
	struct Node* newNode = GetNewNode(x);
	if(head == NULL) {
		head = newNode;
		return;
	}
	head->prev = newNode;
	newNode->next = head; 
	head = newNode;
}

//Inserts a Node at tail of Doubly linked list
void InsertAtTail(int x) {
	struct Node* temp = head;
	struct Node* newNode = GetNewNode(x);
	if(head == NULL) {
		head = newNode;
		return;
	}
	while(temp->next != NULL) temp = temp->next; // Go To last Node
	temp->next = newNode;
	newNode->prev = temp;
}

//Prints all the elements in linked list in forward traversal order
void Print() {
	struct Node* temp = head;
	printf("Forward: ");
	while(temp != NULL) {
		printf("%d ",temp->data);
		temp = temp->next;
	}
	printf("\n");
}

//Prints all elements in linked list in reverse traversal order. 
void ReversePrint() {
	struct Node* temp = head;
	if(temp == NULL) return; // empty list, exit
	// Going to last Node
	while(temp->next != NULL) {
		temp = temp->next;
	}
	// Traversing backward using prev pointer
	printf("Reverse: ");
	while(temp != NULL) {
		printf("%d ",temp->data);
		temp = temp->prev;
	}
	printf("\n");
}

int main() {

	/Driver code to test the implementation/
	head = NULL; // empty list. set head as NULL. 
	
	// Calling an Insert and printing list both in forward as well as reverse direction. 
	InsertAtTail(2); Print(); ReversePrint();
	InsertAtTail(4); Print(); ReversePrint();
	InsertAtHead(6); Print(); ReversePrint();
	InsertAtTail(8); Print(); ReversePrint();
	
}